---
# tasks file for create_machines
- name: Create the basic machines
  os_server:
    state: '{{ item.state }}'
    name: '{{ item.machinename}}'
    image: '{{ item.image_id }}'
    key_name: MARTHY-T430
    wait: yes
    flavor: '{{ item.flavor_id }}'
    floating_ips: 
      - '{{ item.floating_ips }}'
    security_groups: default
    nics:
      - net-id: '{{ item.network_id }}'
#{% if item.meta is defined %}
    meta:
      depl_type: '{{ item.meta.depl_type }}'
#{% endif %}
#{% if item.userdata is defined %}
      userdata: |
      #cloud-config
      hostname: '{{ item.userdata.hostname }}'
      #users:
      #  - name: '{{ cloud_init_user_name }}'
      #    ssh-authorized-keys:
      #      -  '{{ cloud_init_user_key }}'
      #    sudo: ['ALL=(ALL) NOPASSWD:ALL']
      #    shell: /bin/bash
      #  - name: centos
      #    ssh-authorized-keys:
      #      -  '{{ cloud_init_user_key }}'
      #    sudo: ['ALL=(ALL) NOPASSWD:ALL']
      #    shell: /bin/bash
      #{% raw %}
      #ps1_sysnative
      #Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1')) -SkipNetworkProfileCheck
      #{% endraw %}

      package_upgrade: '{{ item.userdata.package_uprgade }}'
#{% endif %}
    timeout: 360
  with_items:
    - '{{ machines2 }}'

- name: query machines
  os_server_facts:
    server: '*'

- name: check runnng servers ssh connectivity
  wait_for:
    host: '{{ item.public_v4 }}'
    port: 22
  when: item.vm_state == "active"
  with_items:
    - '{{ openstack_servers }}'
